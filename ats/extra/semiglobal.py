GAP_OPEN = -1
GAP_EXTEND = -1
MATCH = 1
MISMATCH = -1

def whatever(x, y):
    h = [[0 for j in range(len(y)+1)] for i in range(len(x)+1)]
    e = [[0 for j in range(len(y)+1)] for i in range(len(x)+1)]
    f = [[0 for j in range(len(y)+1)] for i in range(len(x)+1)]
    m = (0, 0)
    for i in range(1, len(x)+1):
        for j in range(1, len(y)+1):
            score = MATCH if x[i-1] == y[j-1] else MISMATCH
            e[i][j] = max(e[i][j-1]+GAP_EXTEND, h[i][j-1]+GAP_OPEN)
            f[i][j] = max(f[i-1][j]+GAP_EXTEND, h[i-1][j]+GAP_OPEN)
            h[i][j] = max(e[i][j], f[i][j], h[i-1][j-1]+score)
            if h[i][j] >= h[m[0]][m[1]]:
                m = (i, j)
    return h, e, f

# x, y = "1234567890ABCDEF"*2, "1234567890ABCDEF"*2
# x, y = "Hello hosetuhae world", "Hello lllllorld"
# x, y = "1234567890ABCDEFHH", "1234567890ABCDEF"
# x, y = 'TGTTACGG', 'GGTTGACTA'
# x, y = '1'*32, '1'*32
x, y = 'Hello world', 'Hello World'
h, e, f = whatever(x, y[:5])
for i in range(1, len(h)):
    for j in range(1, len(h[i])):
        print(f"{h[i][j]:02d} ", end='')
    print()

print()
h, e, f = whatever(x[::-1], y[5:][::-1])
for i in range(1, len(h)):
    for j in range(1, len(h[i])):
        print(f"{h[i][j]:02d} ", end='')
    print()


# 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
# 01 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02
# 01 02 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03
# 01 02 03 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04
# 01 02 03 04 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05
# 01 02 03 04 05 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06
# 01 02 03 04 05 06 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07
# 01 02 03 04 05 06 07 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08
# 01 02 03 04 05 06 07 08 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09
# 01 02 03 04 05 06 07 08 09 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
# 01 02 03 04 05 06 07 08 09 10 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11
# 01 02 03 04 05 06 07 08 09 10 11 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12
# 01 02 03 04 05 06 07 08 09 10 11 12 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13
# 01 02 03 04 05 06 07 08 09 10 11 12 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14
# 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15
# 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16
# 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17
# 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18
# 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 19 19 19 19 19 19 19 19 19 19 19 19 19
# 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 20 20 20 20 20 20 20 20 20 20 20 20
# 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 21 21 21 21 21 21 21 21 21 21 21
# 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 22 22 22 22 22 22 22 22 22 22
# 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 23 23 23 23 23 23 23 23 23
# 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 24 24 24 24 24 24 24 24
# 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 25 25 25 25 25 25 25
# 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 26 26 26 26 26 26
# 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 27 27 27 27 27
# 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 28 28 28 28
# 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 29 29 29
# 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 30 30
# 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 31
# 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32



